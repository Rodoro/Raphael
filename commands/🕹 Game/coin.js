const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../../json/config.json');
const  Guild  = require('../../schemas/guild.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('coin')
        .setDescription('–ü–æ–¥–∫–∏–Ω—É—Ç—å –º–æ–Ω–µ—Ç—É')
        .addStringOption(option =>
            option.setName('side')
                .setDescription('–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞?')
                .addChoices(
                    { name: '–û—Ä—ë–ª', value: 'eagle' },
                    { name: '–†–µ—à–∫–∞', value: 'tails' },
                )),
    async execute(interaction) {

        let data = await Guild.findOne({ guildID: interaction.guild.id });

        const Embed1 = new EmbedBuilder()
            .setColor(data.embedColor)
            .setTitle('–ú–æ–Ω–µ—Ç–∫–∞ –ª–µ—Ç–∏—Ç...')
        await interaction.reply({ embeds: [Embed1] });

        var Embed2;
        var result;
        if (Math.random() < 0.5) { result = '–æ—Ä—ë–ª' } else { result = '—Ä–µ—à–∫–∞' }

        if (interaction.options.getString('side')) {

            if (interaction.user.id == config.developerID) {
                if (interaction.options.getString('side') == 'eagle') {
                    Embed2 = new EmbedBuilder()
                        .setColor('008000')
                        .setTitle(`üìÄ | –ü–æ–±–µ–¥–∞!`)
                        .setDescription(`**–°—Ç–∞–≤–∫–∞:** –û—Ä—ë–ª \n–ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞ –æ—Ä–ª–æ–º –≤–≤–µ—Ä—Ö.`)
                } else {
                    Embed2 = new EmbedBuilder()
                        .setColor('008000')
                        .setTitle(`üìÄ | –ü–æ–±–µ–¥–∞!`)
                        .setDescription(`**–°—Ç–∞–≤–∫–∞:** –†–µ—à–∫–∞ \n–ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞ —Ä–µ—à–∫–æ–π –≤–≤–µ—Ä—Ö.`)
                }
            } else if (interaction.options.getString('side') == 'eagle') {
                if (result == '–æ—Ä—ë–ª') {
                    Embed2 = new EmbedBuilder()
                        .setColor('008000')
                        .setTitle(`üìÄ | –ü–æ–±–µ–¥–∞!`)
                        .setDescription(`**–°—Ç–∞–≤–∫–∞:** –û—Ä—ë–ª \n–ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞ –æ—Ä–ª–æ–º –≤–≤–µ—Ä—Ö.`)
                } else {
                    Embed2 = new EmbedBuilder()
                        .setColor('B22222')
                        .setTitle(`üìÄ | –ü–æ—Ä–∞–∂–µ–Ω–∏–µ`)
                        .setDescription('**–°—Ç–∞–≤–∫–∞:** –û—Ä—ë–ª \n–ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞ —Ä–µ—à–∫–æ–π –≤–≤–µ—Ä—Ö.')
                }
            } else {
                if (result == '—Ä–µ—à–∫–∞') {
                    Embed2 = new EmbedBuilder()
                        .setColor('008000')
                        .setTitle(`üìÄ | –ü–æ–±–µ–¥–∞!`)
                        .setDescription(`**–°—Ç–∞–≤–∫–∞:** –†–µ—à–∫–∞ \n–ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞ —Ä–µ—à–∫–æ–π –≤–≤–µ—Ä—Ö.`)
                } else {
                    Embed2 = new EmbedBuilder()
                        .setColor('B22222')
                        .setTitle(`üìÄ | –ü–æ—Ä–∞–∂–µ–Ω–∏–µ`)
                        .setDescription('**–°—Ç–∞–≤–∫–∞:** –†–µ—à–∫–∞ \n–ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞ –æ—Ä–ª–æ–º –≤–≤–µ—Ä—Ö.')
                }
            }

        } else {
            Embed2 = new EmbedBuilder()
                .setColor(data.embedColor)
                .setTitle(`üìÄ | ${result.charAt(0).toUpperCase() + result.slice(1)}`)
        }

        setTimeout(() => { interaction.editReply({ embeds: [Embed2] }) }, 1000);
    }
}